{
  "address": "0xED894c860c17E5f4f96E3715107964b5f14AbC56",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDepositValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "EmptyStaking",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "NoValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TokenLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TokenUnlocked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "checkout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProfile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "depositTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            }
          ],
          "internalType": "struct IFactory.Staker",
          "name": "stk",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDepositValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Extended",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20Extended",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xddf2d902c66b49fb1957725c3606dc3ebbf867c6b38cdbaccfd26233b953c0d8",
  "receipt": {
    "to": null,
    "from": "0x7624269a420c12395B743aCF327A61f91bd23b84",
    "contractAddress": "0xED894c860c17E5f4f96E3715107964b5f14AbC56",
    "transactionIndex": 1,
    "gasUsed": "1003403",
    "logsBloom": "0x
    "blockHash": "0x434ac7c95aa3351943220ba92888d68142529ed9d6755f8d9e61adcb9566e6e5",
    "transactionHash": "0xddf2d902c66b49fb1957725c3606dc3ebbf867c6b38cdbaccfd26233b953c0d8",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 6053140,
        "transactionHash": "0xddf2d902c66b49fb1957725c3606dc3ebbf867c6b38cdbaccfd26233b953c0d8",
        "address": "0xED894c860c17E5f4f96E3715107964b5f14AbC56",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007624269a420c12395b743acf327a61f91bd23b84"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x434ac7c95aa3351943220ba92888d68142529ed9d6755f8d9e61adcb9566e6e5"
      }
    ],
    "blockNumber": 6053140,
    "cumulativeGasUsed": "1047302",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "eafc940ee0e93d2a625f020fff75d8db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDepositValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EmptyStaking\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NoValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenUnlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"checkout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProfile\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct IFactory.Staker\",\"name\":\"stk\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"checkout()\":{\"details\":\"Unstake Eth from the vault.\"},\"deposit()\":{\"details\":\"Stake Eth for token reward. - The amount of Eth sent along the call should be greater       than the minimum staking amount. - If sender already own an interwallet otherwise we       create a new one for them. - We can make a dynamic staking i.e depositors can stake any amount      Eth, anytime. Each stake is unique to another in timing and      identity.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setToken(address)\":{\"params\":{\"_token\":\": Token address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"vault\":{\"details\":\"Mapping of rounds to stake vault\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setToken(address)\":{\"notice\":\"onlyOwner function: SetToken\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport { IERC20Extended} from \\\"./interfaces/IERC20Extended.sol\\\";\\r\\nimport { IFactory } from \\\"./interfaces/IFactory.sol\\\";\\r\\nimport { IInterWallet } from \\\"./interfaces/IInterWallet.sol\\\";\\r\\nimport { InterWallet } from \\\"./wallet/InterWallet.sol\\\";\\r\\n\\r\\ncontract Factory is IFactory, Ownable {\\r\\n    error EmptyStaking(uint);\\r\\n    error NoValue(uint);\\r\\n\\r\\n    event TokenLocked(uint);\\r\\n    event TokenUnlocked(uint);\\r\\n\\r\\n    // Minimum amount that can be deposited\\r\\n    uint public minDepositValue;\\r\\n\\r\\n    // Total depositors\\r\\n    uint public depositors;\\r\\n\\r\\n    // Reward token\\r\\n    IERC20Extended public token;\\r\\n\\r\\n    ///@dev Mapping of rounds to stake vault\\r\\n    mapping (address => Staker) private vault;\\r\\n\\r\\n    constructor (uint _minDepositValue) Ownable(_msgSender()) {\\r\\n        require(_minDepositValue > 0, \\\"Minimum staking too low\\\");\\r\\n        minDepositValue = _minDepositValue;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        require(msg.value > 0, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * onlyOwner function: SetToken\\r\\n     * @param _token : Token address\\r\\n     */\\r\\n    function setToken(IERC20Extended _token) public onlyOwner {\\r\\n        token = _token;\\r\\n    }\\r\\n\\r\\n    /**@dev Stake Eth for token reward.\\r\\n     * - The amount of Eth sent along the call should be greater \\r\\n     *      than the minimum staking amount.\\r\\n     * - If sender already own an interwallet otherwise we \\r\\n     *      create a new one for them.\\r\\n     * - We can make a dynamic staking i.e depositors can stake any amount\\r\\n     *      Eth, anytime. Each stake is unique to another in timing and\\r\\n     *      identity.\\r\\n     */\\r\\n    function deposit() public payable override returns(bool){\\r\\n        address alc;\\r\\n        Staker memory stk = _getProfile(_msgSender());\\r\\n        if(msg.value < minDepositValue) revert NoValue(msg.value);\\r\\n        alc = stk.wallet;\\r\\n        if(alc == address(0)) {\\r\\n            alc = address(new InterWallet(token));\\r\\n        }\\r\\n\\r\\n        if(stk.ethAmount > 0) {\\r\\n            _unstake(alc, stk.ethAmount, stk.depositTime);\\r\\n        }\\r\\n        vault[_msgSender()] = Staker(_now(), msg.value, alc);\\r\\n        depositors ++;\\r\\n        emit TokenLocked(msg.value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _unstake(address alc, uint value, uint depositTime) private {\\r\\n        depositors --;\\r\\n        vault[_msgSender()].ethAmount = 0;\\r\\n        (bool sent,) = alc.call{value: value}(\\\"\\\");\\r\\n        require(sent, \\\"Transfer rejected\\\");\\r\\n        uint reward = _calculateReward(value, depositTime);\\r\\n        if(reward > 0) _mintRewardToken(alc, reward);\\r\\n\\r\\n        emit TokenUnlocked(value);\\r\\n    }\\r\\n\\r\\n    /**@dev Unstake Eth from the vault.\\r\\n     */\\r\\n    function checkout() public override returns(bool) {\\r\\n        Staker memory stk = vault[_msgSender()];\\r\\n        if(stk.ethAmount == 0) revert EmptyStaking(stk.ethAmount);\\r\\n        require(stk.wallet != address(0), \\\"Account anomally detected\\\");\\r\\n        _unstake(stk.wallet, stk.ethAmount, stk.depositTime);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    ///@dev Returns current unix time stamp\\r\\n    function _now() internal view returns(uint) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**@dev Calculate reward due on staking.\\r\\n     * @param stakedAmt - Exact amount staked.\\r\\n     * @param depositTime - Time stake was made.\\r\\n     * \\r\\n     * To get the reward, we compare the current unixtime to the time staking\\r\\n     * was performed to get the time difference. If time difference is greater \\r\\n     * than 1 minute, multiplier will increase otherwise it defaults to 1.\\r\\n     */\\r\\n    function _calculateReward(uint stakedAmt, uint depositTime) internal view returns(uint reward) {\\r\\n        uint divisor = 60;\\r\\n        uint curTime = _now();\\r\\n        if(curTime == depositTime) {\\r\\n            reward = 10 ** 15;\\r\\n            return reward;\\r\\n        }\\r\\n\\r\\n        if(curTime > depositTime) {\\r\\n            uint timeDiff = curTime - depositTime;\\r\\n            if(timeDiff > 0){\\r\\n                reward = (timeDiff * stakedAmt) / divisor; // Weighted reward\\r\\n            } else {\\r\\n                reward = 1e15;\\r\\n            }\\r\\n\\r\\n        }\\r\\n        return reward;\\r\\n    }\\r\\n\\r\\n    /// Mint rewardToken to staker on staking receipt\\r\\n    function _mintRewardToken(address to, uint amount) private {\\r\\n        require(IERC20Extended(token).mint(to, amount), \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function _getProfile(address who) internal view returns(Staker memory) {\\r\\n        return vault[who];\\r\\n    } \\r\\n\\r\\n    function getProfile() public view returns(Staker memory stk) {\\r\\n        return _getProfile(_msgSender());\\r\\n    }\\r\\n\\r\\n    function withdraw() public { \\r\\n        address alc = _getProfile(_msgSender()).wallet;\\r\\n        IInterWallet(alc).withdrawEth(_msgSender());\\r\\n        IInterWallet(alc).withdrawERC20(_msgSender());\\r\\n    }\\r\\n}\",\"keccak256\":\"0x321e9ce8ff02e734722e27faeca047ee2dab157cf3eecc84021ea3b29ddf2364\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20Extended is IERC20 {\\r\\n    function mint(address to, uint amount) external returns(bool);\\r\\n}\",\"keccak256\":\"0x499b9dc177e17306f3133feb144d97b4fa430bd65abb1f998dbac666577dc6a6\",\"license\":\"MIT\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\ninterface IFactory {\\r\\n  // Staker's profile data\\r\\n  struct Staker {\\r\\n    uint depositTime;\\r\\n    uint ethAmount;\\r\\n    address wallet;\\r\\n  }\\r\\n\\r\\n  function deposit() external payable returns(bool);\\r\\n  function checkout() external returns(bool);\\r\\n\\r\\n}\",\"keccak256\":\"0x4177c51949f4933dfdc2476ba3da8e8f00254ee58d489cca9f0b8e33caaf9fde\",\"license\":\"MIT\"},\"contracts/interfaces/IInterWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\ninterface IInterWallet {\\r\\n  function withdrawEth(address to) external;\\r\\n  function withdrawERC20(address to) external;\\r\\n}\",\"keccak256\":\"0x674c8936b5e48c62c9ba6d12832477da4f21975db186faef5479cffbdd3ea456\",\"license\":\"MIT\"},\"contracts/wallet/InterWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport {  IInterWallet } from \\\"../interfaces/IInterWallet.sol\\\";\\r\\n\\r\\ncontract InterWallet is IInterWallet, Context {\\r\\n  error UnAuthorizedCaller(address);\\r\\n  event EthReceived(uint);\\r\\n\\r\\n  // Owner's address\\r\\n  address private owner;\\r\\n\\r\\n  // Reward token\\r\\n  IERC20 private rewardToken;\\r\\n\\r\\n  constructor(IERC20 _rewardToken) payable {\\r\\n    owner = _msgSender();\\r\\n    rewardToken = _rewardToken;\\r\\n  }\\r\\n  \\r\\n  //Fallback\\r\\n  receive() external payable {\\r\\n    emit EthReceived(msg.value);\\r\\n  }\\r\\n\\r\\n  // Only owner can call when this is invoked\\r\\n  modifier onlyOwner() {\\r\\n    if(_msgSender() != owner) revert UnAuthorizedCaller(_msgSender());\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  ///@dev Withdraw Eth of @param amount : amount to withdraw from contract \\r\\n  function withdrawEth(address to) external onlyOwner {\\r\\n    uint balance = address(this).balance;\\r\\n    (bool success,) = to.call{value: balance}(\\\"\\\");\\r\\n    require(success, \\\"withdrawal failed\\\");\\r\\n  }\\r\\n\\r\\n  ///@dev Withdraw reward token \\r\\n  function withdrawERC20(address to) external onlyOwner {\\r\\n    uint balance = IERC20(rewardToken).balanceOf(address(this));\\r\\n    if(balance >  0) require(IERC20(rewardToken).transfer(to, balance), \\\"Failed\\\");\\r\\n  } \\r\\n}\\r\\n\",\"keccak256\":\"0x6852a3007b2ba8fdb63f96e0163558f293cab211bc1dd66760b8dd89e8fa7c56\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516111e53803806111e583398101604081905261002f91610161565b61004064010000000061010d810204565b600160a060020a038116610088576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b61009a81640100000000610111810204565b5060008111610105576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d696e696d756d207374616b696e6720746f6f206c6f77000000000000000000604482015260640161007f565b60015561017a565b3390565b60008054600160a060020a03838116600160a060020a0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561017357600080fd5b5051919050565b61105c806101896000396000f3fe6080604052600436106100a45760003560e060020a900480638da5cb5b116100685780638da5cb5b1461017a578063aaa46688146101ac578063d0e30db0146101c2578063d6afc9b1146101ca578063f2fde38b1461020a578063fc0c546a1461022a57600080fd5b806306099d69146100e2578063070c82a81461010c578063144fa6d7146101305780633ccfd60b14610150578063715018a61461016557600080fd5b366100dd57600034116100db5760405160e560020a62461bcd02815260206004820152600060248201526044015b60405180910390fd5b005b600080fd5b3480156100ee57600080fd5b506100f761024a565b60405190151581526020015b60405180910390f35b34801561011857600080fd5b5061012260015481565b604051908152602001610103565b34801561013c57600080fd5b506100db61014b366004610a3b565b610346565b34801561015c57600080fd5b506100db61037d565b34801561017157600080fd5b506100db610465565b34801561018657600080fd5b50600054600160a060020a03165b604051600160a060020a039091168152602001610103565b3480156101b857600080fd5b5061012260025481565b6100f7610479565b3480156101d657600080fd5b506101df610604565b60408051825181526020808401519082015291810151600160a060020a031690820152606001610103565b34801561021657600080fd5b506100db610225366004610a3b565b61063f565b34801561023657600080fd5b5060035461019490600160a060020a031681565b3360009081526004602090815260408083208151606081018352815481526001820154938101849052600290910154600160a060020a0316918101919091529082036102ca5780602001516040517f5be792e20000000000000000000000000000000000000000000000000000000081526004016100d291815260200190565b6040810151600160a060020a03166103275760405160e560020a62461bcd02815260206004820152601960248201527f4163636f756e7420616e6f6d616c6c792064657465637465640000000000000060448201526064016100d2565b61033e816040015182602001518360000151610696565b600191505090565b61034e6107dd565b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600061038833610823565b604001519050600160a060020a0381166325e160633360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1580156103dd57600080fd5b505af11580156103f1573d6000803e3d6000fd5b5050505080600160a060020a031663f4f3b20061040b3390565b60405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15801561044a57600080fd5b505af115801561045e573d6000803e3d6000fd5b5050505050565b61046d6107dd565b6104776000610894565b565b6000808061048633610823565b90506001543410156104c6576040517f2c83dd4e0000000000000000000000000000000000000000000000000000000081523460048201526024016100d2565b60408101519150600160a060020a03821661052657600354604051600160a060020a03909116906104f690610a19565b600160a060020a039091168152602001604051809103906000f080158015610522573d6000803e3d6000fd5b5091505b602081015115610543576105438282602001518360000151610696565b60405180606001604052806105554290565b815234602080830191909152600160a060020a03858116604093840152336000908152600483528381208551815592850151600184015593909201516002918201805473ffffffffffffffffffffffffffffffffffffffff191691909316179091558054916105c383610a8e565b90915550506040513481527f886574b2eee64153fbfb4ca8878ae1db0724a35326423f17ded4dd325a27a0c09060200160405180910390a160019250505090565b610631604051806060016040528060008152602001600081526020016000600160a060020a031681525090565b61063a33610823565b905090565b6106476107dd565b600160a060020a03811661068a576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016100d2565b61069381610894565b50565b600280549060006106a683610aa7565b91905055506000600460006106b83390565b600160a060020a0316600160a060020a0316815260200190815260200160002060010181905550600083600160a060020a03168360405160006040518083038185875af1925050503d806000811461072c576040519150601f19603f3d011682016040523d82523d6000602084013e610731565b606091505b50509050806107855760405160e560020a62461bcd02815260206004820152601160248201527f5472616e736665722072656a656374656400000000000000000000000000000060448201526064016100d2565b600061079184846108f1565b905080156107a3576107a3858261095c565b6040518481527f7ff05c79c2a3d239576a86d8af5c623d17e7a676e424313ca21481b15047783f9060200160405180910390a15050505050565b600054600160a060020a03163314610477576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016100d2565b610850604051806060016040528060008152602001600081526020016000600160a060020a031681525090565b50600160a060020a03908116600090815260046020908152604091829020825160608101845281548152600182015492810192909252600201549092169082015290565b60008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000603c4283810361090e5766038d7ea4c6800092505050610956565b838111156109535760006109228583610abe565b9050801561094657826109358783610ad1565b61093f9190610ae8565b9350610951565b66038d7ea4c6800093505b505b50505b92915050565b6003546040517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015260248201849052909116906340c10f19906044016020604051808303816000875af11580156109c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ec9190610b23565b610a155760405160e560020a62461bcd02815260206004820152600060248201526044016100d2565b5050565b6104e180610b4683390190565b600160a060020a038116811461069357600080fd5b600060208284031215610a4d57600080fd5b8135610a5881610a26565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060018201610aa057610aa0610a5f565b5060010190565b600081610ab657610ab6610a5f565b506000190190565b8181038181111561095657610956610a5f565b808202811582820484141761095657610956610a5f565b600082610b1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215610b3557600080fd5b81518015158114610a5857600080fdfe60806040526040516104e13803806104e18339810160408190526100229161006b565b610033640100000000610067810204565b60008054600160a060020a03928316600160a060020a0319918216179091556001805493909216921691909117905561009b565b3390565b60006020828403121561007d57600080fd5b8151600160a060020a038116811461009457600080fd5b9392505050565b610437806100aa6000396000f3fe608060405260043610610049577c0100000000000000000000000000000000000000000000000000000000600035046325e160638114610088578063f4f3b200146100aa57600080fd5b36610083576040513481527f353bcaaf167a6add95a753d39727e3d3beb865129a69a10ed774b0b8996714039060200160405180910390a1005b600080fd5b34801561009457600080fd5b506100a86100a3366004610396565b6100ca565b005b3480156100b657600080fd5b506100a86100c5366004610396565b6101ed565b600054600160a060020a031633600160a060020a03161461012a57335b6040517f0b104a5b000000000000000000000000000000000000000000000000000000008152600160a060020a0390911660048201526024015b60405180910390fd5b604051303190600090600160a060020a0384169083908381818185875af1925050503d8060008114610178576040519150601f19603f3d011682016040523d82523d6000602084013e61017d565b606091505b50509050806101e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f7769746864726177616c206661696c65640000000000000000000000000000006044820152606401610121565b505050565b600054600160a060020a031633600160a060020a03161461020e57336100e7565b6001546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600091600160a060020a0316906370a0823190602401602060405180830381865afa158015610270573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029491906103c6565b90508015610392576001546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015610308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032c91906103df565b610392576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4661696c656400000000000000000000000000000000000000000000000000006044820152606401610121565b5050565b6000602082840312156103a857600080fd5b8135600160a060020a03811681146103bf57600080fd5b9392505050565b6000602082840312156103d857600080fd5b5051919050565b6000602082840312156103f157600080fd5b815180151581146103bf57600080fdfea26469706673582212209cee98ce2e2857a2d2fc27f96a421625841c9e9298e7885145d6e7a064e5277564736f6c63430008180033a264697066735822122050146c66f93514560e5be411c8226f158b83c9d67df4899287be1472c750ac5d64736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100a45760003560e060020a900480638da5cb5b116100685780638da5cb5b1461017a578063aaa46688146101ac578063d0e30db0146101c2578063d6afc9b1146101ca578063f2fde38b1461020a578063fc0c546a1461022a57600080fd5b806306099d69146100e2578063070c82a81461010c578063144fa6d7146101305780633ccfd60b14610150578063715018a61461016557600080fd5b366100dd57600034116100db5760405160e560020a62461bcd02815260206004820152600060248201526044015b60405180910390fd5b005b600080fd5b3480156100ee57600080fd5b506100f761024a565b60405190151581526020015b60405180910390f35b34801561011857600080fd5b5061012260015481565b604051908152602001610103565b34801561013c57600080fd5b506100db61014b366004610a3b565b610346565b34801561015c57600080fd5b506100db61037d565b34801561017157600080fd5b506100db610465565b34801561018657600080fd5b50600054600160a060020a03165b604051600160a060020a039091168152602001610103565b3480156101b857600080fd5b5061012260025481565b6100f7610479565b3480156101d657600080fd5b506101df610604565b60408051825181526020808401519082015291810151600160a060020a031690820152606001610103565b34801561021657600080fd5b506100db610225366004610a3b565b61063f565b34801561023657600080fd5b5060035461019490600160a060020a031681565b3360009081526004602090815260408083208151606081018352815481526001820154938101849052600290910154600160a060020a0316918101919091529082036102ca5780602001516040517f5be792e20000000000000000000000000000000000000000000000000000000081526004016100d291815260200190565b6040810151600160a060020a03166103275760405160e560020a62461bcd02815260206004820152601960248201527f4163636f756e7420616e6f6d616c6c792064657465637465640000000000000060448201526064016100d2565b61033e816040015182602001518360000151610696565b600191505090565b61034e6107dd565b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600061038833610823565b604001519050600160a060020a0381166325e160633360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1580156103dd57600080fd5b505af11580156103f1573d6000803e3d6000fd5b5050505080600160a060020a031663f4f3b20061040b3390565b60405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15801561044a57600080fd5b505af115801561045e573d6000803e3d6000fd5b5050505050565b61046d6107dd565b6104776000610894565b565b6000808061048633610823565b90506001543410156104c6576040517f2c83dd4e0000000000000000000000000000000000000000000000000000000081523460048201526024016100d2565b60408101519150600160a060020a03821661052657600354604051600160a060020a03909116906104f690610a19565b600160a060020a039091168152602001604051809103906000f080158015610522573d6000803e3d6000fd5b5091505b602081015115610543576105438282602001518360000151610696565b60405180606001604052806105554290565b815234602080830191909152600160a060020a03858116604093840152336000908152600483528381208551815592850151600184015593909201516002918201805473ffffffffffffffffffffffffffffffffffffffff191691909316179091558054916105c383610a8e565b90915550506040513481527f886574b2eee64153fbfb4ca8878ae1db0724a35326423f17ded4dd325a27a0c09060200160405180910390a160019250505090565b610631604051806060016040528060008152602001600081526020016000600160a060020a031681525090565b61063a33610823565b905090565b6106476107dd565b600160a060020a03811661068a576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016100d2565b61069381610894565b50565b600280549060006106a683610aa7565b91905055506000600460006106b83390565b600160a060020a0316600160a060020a0316815260200190815260200160002060010181905550600083600160a060020a03168360405160006040518083038185875af1925050503d806000811461072c576040519150601f19603f3d011682016040523d82523d6000602084013e610731565b606091505b50509050806107855760405160e560020a62461bcd02815260206004820152601160248201527f5472616e736665722072656a656374656400000000000000000000000000000060448201526064016100d2565b600061079184846108f1565b905080156107a3576107a3858261095c565b6040518481527f7ff05c79c2a3d239576a86d8af5c623d17e7a676e424313ca21481b15047783f9060200160405180910390a15050505050565b600054600160a060020a03163314610477576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016100d2565b610850604051806060016040528060008152602001600081526020016000600160a060020a031681525090565b50600160a060020a03908116600090815260046020908152604091829020825160608101845281548152600182015492810192909252600201549092169082015290565b60008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000603c4283810361090e5766038d7ea4c6800092505050610956565b838111156109535760006109228583610abe565b9050801561094657826109358783610ad1565b61093f9190610ae8565b9350610951565b66038d7ea4c6800093505b505b50505b92915050565b6003546040517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015260248201849052909116906340c10f19906044016020604051808303816000875af11580156109c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ec9190610b23565b610a155760405160e560020a62461bcd02815260206004820152600060248201526044016100d2565b5050565b6104e180610b4683390190565b600160a060020a038116811461069357600080fd5b600060208284031215610a4d57600080fd5b8135610a5881610a26565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060018201610aa057610aa0610a5f565b5060010190565b600081610ab657610ab6610a5f565b506000190190565b8181038181111561095657610956610a5f565b808202811582820484141761095657610956610a5f565b600082610b1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215610b3557600080fd5b81518015158114610a5857600080fdfe60806040526040516104e13803806104e18339810160408190526100229161006b565b610033640100000000610067810204565b60008054600160a060020a03928316600160a060020a0319918216179091556001805493909216921691909117905561009b565b3390565b60006020828403121561007d57600080fd5b8151600160a060020a038116811461009457600080fd5b9392505050565b610437806100aa6000396000f3fe608060405260043610610049577c0100000000000000000000000000000000000000000000000000000000600035046325e160638114610088578063f4f3b200146100aa57600080fd5b36610083576040513481527f353bcaaf167a6add95a753d39727e3d3beb865129a69a10ed774b0b8996714039060200160405180910390a1005b600080fd5b34801561009457600080fd5b506100a86100a3366004610396565b6100ca565b005b3480156100b657600080fd5b506100a86100c5366004610396565b6101ed565b600054600160a060020a031633600160a060020a03161461012a57335b6040517f0b104a5b000000000000000000000000000000000000000000000000000000008152600160a060020a0390911660048201526024015b60405180910390fd5b604051303190600090600160a060020a0384169083908381818185875af1925050503d8060008114610178576040519150601f19603f3d011682016040523d82523d6000602084013e61017d565b606091505b50509050806101e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f7769746864726177616c206661696c65640000000000000000000000000000006044820152606401610121565b505050565b600054600160a060020a031633600160a060020a03161461020e57336100e7565b6001546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600091600160a060020a0316906370a0823190602401602060405180830381865afa158015610270573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029491906103c6565b90508015610392576001546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015610308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032c91906103df565b610392576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4661696c656400000000000000000000000000000000000000000000000000006044820152606401610121565b5050565b6000602082840312156103a857600080fd5b8135600160a060020a03811681146103bf57600080fd5b9392505050565b6000602082840312156103d857600080fd5b5051919050565b6000602082840312156103f157600080fd5b815180151581146103bf57600080fdfea26469706673582212209cee98ce2e2857a2d2fc27f96a421625841c9e9298e7885145d6e7a064e5277564736f6c63430008180033a264697066735822122050146c66f93514560e5be411c8226f158b83c9d67df4899287be1472c750ac5d64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "checkout()": {
        "details": "Unstake Eth from the vault."
      },
      "deposit()": {
        "details": "Stake Eth for token reward. - The amount of Eth sent along the call should be greater       than the minimum staking amount. - If sender already own an interwallet otherwise we       create a new one for them. - We can make a dynamic staking i.e depositors can stake any amount      Eth, anytime. Each stake is unique to another in timing and      identity."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setToken(address)": {
        "params": {
          "_token": ": Token address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "vault": {
        "details": "Mapping of rounds to stake vault"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setToken(address)": {
        "notice": "onlyOwner function: SetToken"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 289,
        "contract": "contracts/Factory.sol:Factory",
        "label": "minDepositValue",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 291,
        "contract": "contracts/Factory.sol:Factory",
        "label": "depositors",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 294,
        "contract": "contracts/Factory.sol:Factory",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20Extended)705"
      },
      {
        "astId": 300,
        "contract": "contracts/Factory.sol:Factory",
        "label": "vault",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Staker)714_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Extended)705": {
        "encoding": "inplace",
        "label": "contract IERC20Extended",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Staker)714_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IFactory.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)714_storage"
      },
      "t_struct(Staker)714_storage": {
        "encoding": "inplace",
        "label": "struct IFactory.Staker",
        "members": [
          {
            "astId": 709,
            "contract": "contracts/Factory.sol:Factory",
            "label": "depositTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 711,
            "contract": "contracts/Factory.sol:Factory",
            "label": "ethAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 713,
            "contract": "contracts/Factory.sol:Factory",
            "label": "wallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}