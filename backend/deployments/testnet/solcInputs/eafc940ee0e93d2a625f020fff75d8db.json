{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/Factory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.24;\r\n\r\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport { IERC20Extended} from \"./interfaces/IERC20Extended.sol\";\r\nimport { IFactory } from \"./interfaces/IFactory.sol\";\r\nimport { IInterWallet } from \"./interfaces/IInterWallet.sol\";\r\nimport { InterWallet } from \"./wallet/InterWallet.sol\";\r\n\r\ncontract Factory is IFactory, Ownable {\r\n    error EmptyStaking(uint);\r\n    error NoValue(uint);\r\n\r\n    event TokenLocked(uint);\r\n    event TokenUnlocked(uint);\r\n\r\n    // Minimum amount that can be deposited\r\n    uint public minDepositValue;\r\n\r\n    // Total depositors\r\n    uint public depositors;\r\n\r\n    // Reward token\r\n    IERC20Extended public token;\r\n\r\n    ///@dev Mapping of rounds to stake vault\r\n    mapping (address => Staker) private vault;\r\n\r\n    constructor (uint _minDepositValue) Ownable(_msgSender()) {\r\n        require(_minDepositValue > 0, \"Minimum staking too low\");\r\n        minDepositValue = _minDepositValue;\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.value > 0, \"\");\r\n    }\r\n\r\n    /**\r\n     * onlyOwner function: SetToken\r\n     * @param _token : Token address\r\n     */\r\n    function setToken(IERC20Extended _token) public onlyOwner {\r\n        token = _token;\r\n    }\r\n\r\n    /**@dev Stake Eth for token reward.\r\n     * - The amount of Eth sent along the call should be greater \r\n     *      than the minimum staking amount.\r\n     * - If sender already own an interwallet otherwise we \r\n     *      create a new one for them.\r\n     * - We can make a dynamic staking i.e depositors can stake any amount\r\n     *      Eth, anytime. Each stake is unique to another in timing and\r\n     *      identity.\r\n     */\r\n    function deposit() public payable override returns(bool){\r\n        address alc;\r\n        Staker memory stk = _getProfile(_msgSender());\r\n        if(msg.value < minDepositValue) revert NoValue(msg.value);\r\n        alc = stk.wallet;\r\n        if(alc == address(0)) {\r\n            alc = address(new InterWallet(token));\r\n        }\r\n\r\n        if(stk.ethAmount > 0) {\r\n            _unstake(alc, stk.ethAmount, stk.depositTime);\r\n        }\r\n        vault[_msgSender()] = Staker(_now(), msg.value, alc);\r\n        depositors ++;\r\n        emit TokenLocked(msg.value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _unstake(address alc, uint value, uint depositTime) private {\r\n        depositors --;\r\n        vault[_msgSender()].ethAmount = 0;\r\n        (bool sent,) = alc.call{value: value}(\"\");\r\n        require(sent, \"Transfer rejected\");\r\n        uint reward = _calculateReward(value, depositTime);\r\n        if(reward > 0) _mintRewardToken(alc, reward);\r\n\r\n        emit TokenUnlocked(value);\r\n    }\r\n\r\n    /**@dev Unstake Eth from the vault.\r\n     */\r\n    function checkout() public override returns(bool) {\r\n        Staker memory stk = vault[_msgSender()];\r\n        if(stk.ethAmount == 0) revert EmptyStaking(stk.ethAmount);\r\n        require(stk.wallet != address(0), \"Account anomally detected\");\r\n        _unstake(stk.wallet, stk.ethAmount, stk.depositTime);\r\n\r\n        return true;\r\n    }\r\n\r\n    ///@dev Returns current unix time stamp\r\n    function _now() internal view returns(uint) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**@dev Calculate reward due on staking.\r\n     * @param stakedAmt - Exact amount staked.\r\n     * @param depositTime - Time stake was made.\r\n     * \r\n     * To get the reward, we compare the current unixtime to the time staking\r\n     * was performed to get the time difference. If time difference is greater \r\n     * than 1 minute, multiplier will increase otherwise it defaults to 1.\r\n     */\r\n    function _calculateReward(uint stakedAmt, uint depositTime) internal view returns(uint reward) {\r\n        uint divisor = 60;\r\n        uint curTime = _now();\r\n        if(curTime == depositTime) {\r\n            reward = 10 ** 15;\r\n            return reward;\r\n        }\r\n\r\n        if(curTime > depositTime) {\r\n            uint timeDiff = curTime - depositTime;\r\n            if(timeDiff > 0){\r\n                reward = (timeDiff * stakedAmt) / divisor; // Weighted reward\r\n            } else {\r\n                reward = 1e15;\r\n            }\r\n\r\n        }\r\n        return reward;\r\n    }\r\n\r\n    /// Mint rewardToken to staker on staking receipt\r\n    function _mintRewardToken(address to, uint amount) private {\r\n        require(IERC20Extended(token).mint(to, amount), \"\");\r\n    }\r\n\r\n    function _getProfile(address who) internal view returns(Staker memory) {\r\n        return vault[who];\r\n    } \r\n\r\n    function getProfile() public view returns(Staker memory stk) {\r\n        return _getProfile(_msgSender());\r\n    }\r\n\r\n    function withdraw() public { \r\n        address alc = _getProfile(_msgSender()).wallet;\r\n        IInterWallet(alc).withdrawEth(_msgSender());\r\n        IInterWallet(alc).withdrawERC20(_msgSender());\r\n    }\r\n}"
    },
    "contracts/interfaces/IERC20Extended.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IERC20Extended is IERC20 {\r\n    function mint(address to, uint amount) external returns(bool);\r\n}"
    },
    "contracts/interfaces/IFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\ninterface IFactory {\r\n  // Staker's profile data\r\n  struct Staker {\r\n    uint depositTime;\r\n    uint ethAmount;\r\n    address wallet;\r\n  }\r\n\r\n  function deposit() external payable returns(bool);\r\n  function checkout() external returns(bool);\r\n\r\n}"
    },
    "contracts/interfaces/IInterWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\ninterface IInterWallet {\r\n  function withdrawEth(address to) external;\r\n  function withdrawERC20(address to) external;\r\n}"
    },
    "contracts/wallet/InterWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport { Context } from \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport {  IInterWallet } from \"../interfaces/IInterWallet.sol\";\r\n\r\ncontract InterWallet is IInterWallet, Context {\r\n  error UnAuthorizedCaller(address);\r\n  event EthReceived(uint);\r\n\r\n  // Owner's address\r\n  address private owner;\r\n\r\n  // Reward token\r\n  IERC20 private rewardToken;\r\n\r\n  constructor(IERC20 _rewardToken) payable {\r\n    owner = _msgSender();\r\n    rewardToken = _rewardToken;\r\n  }\r\n  \r\n  //Fallback\r\n  receive() external payable {\r\n    emit EthReceived(msg.value);\r\n  }\r\n\r\n  // Only owner can call when this is invoked\r\n  modifier onlyOwner() {\r\n    if(_msgSender() != owner) revert UnAuthorizedCaller(_msgSender());\r\n    _;\r\n  }\r\n\r\n  ///@dev Withdraw Eth of @param amount : amount to withdraw from contract \r\n  function withdrawEth(address to) external onlyOwner {\r\n    uint balance = address(this).balance;\r\n    (bool success,) = to.call{value: balance}(\"\");\r\n    require(success, \"withdrawal failed\");\r\n  }\r\n\r\n  ///@dev Withdraw reward token \r\n  function withdrawERC20(address to) external onlyOwner {\r\n    uint balance = IERC20(rewardToken).balanceOf(address(this));\r\n    if(balance >  0) require(IERC20(rewardToken).transfer(to, balance), \"Failed\");\r\n  } \r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "byzantium",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}